#!/usr/bin/env ruby

# ==============================================================================
# John Kerl sometime in the mid-200x's?
# http://johnkerl.org
# Ported to Ruby 2012-07-11.
# Runs a command a specifed number of times, e.g.
# repeat 20 'my-random-number-generator | md5sum'
# ==============================================================================

$us = File.basename $0

# ------------------------------------------------------------------------------
def usage()
   $stderr.puts " Usage: #{$us} [-e] {count} {command ...}"
   exit 1
end

# ------------------------------------------------------------------------------
$stdout.sync = true
$stderr.sync = true

break_on_error = false
break_on_not_error = false
print_counter = false

if ARGV.length >= 1
    if ARGV[0] == "-e"
        ARGV.shift
        break_on_error = true
    elsif ARGV[0] == "-x"
        ARGV.shift
        break_on_not_error = true
    elsif ARGV[0] == "-n"
        ARGV.shift
        print_counter = true
    end
end

rc = 0
usage unless ARGV.length >= 2;
usage unless ARGV[0] =~ /^[0-9]+$/
count = ARGV.shift.to_i;
usage unless count > 0;
cmd = ARGV.join(' ')

(1..count).each do |i|
   if print_counter
    puts "--- #{i}"
   end

   rc = system(cmd)
   status = $?

   if status.signaled? and status.termsig == 2
      # E.g. control-C.  Note that maybe a child process of system()
      # got the control-C, so we might not get it here.
      exit 1
   end

   if break_on_error
       if not status.success?
           rc = 1
           break
       end
   end
   if break_on_not_error
       if status.success?
           break
       end
   end
end

exit rc
