#!/usr/bin/ruby

# ================================================================
# We convert from CSV to vertical format as follows:
# * split on commas
# * replace "" with "_"
# * print transposed
# * left-justify all output columns (which were input rows)
# The -h {headcount} option is since sometimes I want to transpose only the top
# few lines of a very long file.
#
# Please see format-notes.txt in this directory for more information.
#
# John Kerl, 2012-03-31
# ================================================================

@@us     = File.basename($0)
@@ourdir = File.dirname($0)

require 'getoptlong'

# ================================================================
def main()
	$encode_whitespace = false
	$head_count = nil

	getopt = GetoptLong.new(
		[ '-e', '--encode', GetoptLong::NO_ARGUMENT ],
		[ '-h', '--head',   GetoptLong::REQUIRED_ARGUMENT ]
	)
	getopt.each do |opt, arg|
		case opt
			when "-e";
				$encode_whitespace = true
			when "-h";
				if arg.match(/^\d+$/)
					$head_count = arg.to_i
				else
					$stderr.puts("#{@@us}:  can't parse \"#{arg}\" " \
						+ "as non-negative integer.")
					exit 1
				end
				if $head_count < 1
					$stderr.puts("#{@@us}:  head_count must be >= 1; " \
						+ "got #{$head_count}.")
					exit 1
				end
		end
	end
	filenames = ARGV

	ok = true
	if filenames.length == 0
		ok &= do_stdin()
	else
		filenames.each{|filename| ok &= do_file(filename)}
	end
end

# ----------------------------------------------------------------
# Encode space/tab as hexadecimal ASCII if desired.
# Decode commas from hexadecimal ASCII.
def line_to_fields(input_line)
	input_line.chomp.split(/,/).collect{|field|
		if field == ""
			"_"
		elsif $encode_whitespace
			field.gsub(/%2c/, ',').gsub(/ /, '%20').gsub(/\t/, '%09')
		else
			field.gsub(/%2c/, ',')
		end
	}
end

# ----------------------------------------------------------------
# Non-streaming, since we need to read all lines to find the maximum column
# widths.
def do_stdin()
	lines = []
	if $head_count.nil?
		lines = $stdin.readlines
	else

		lines = []
		line_number = 1
		while (line = $stdin.gets)
			lines << line
			line_number = line_number + 1
			break if line_number > $head_count
		end

	end
	do_lines(lines)
	return true
end

# ----------------------------------------------------------------
# Non-streaming, since we need to read all lines to find the maximum column
# widths.
def do_file(filename)
	if ! File.exists?(filename)
		$stderr.puts "Can't find \"#{filename}\"."
		return false
	end
	lines = []
	if $head_count.nil?
		lines = File.readlines(filename)
	else

		lines = []
		line_number = 1
		handle = File.new(filename, 'r')
		while (line = handle.gets)
			lines << line
			line_number = line_number + 1
			break if line_number > $head_count
		end
		handle.close

	end
	do_lines(lines)
	return true
end

# ----------------------------------------------------------------
def do_lines(lines)

	# Read, split, and store lines, finding maximum field width for each input
	# row (output column).
	fields_list = []
	num_rows = 0
	max_num_cols = 0
	row_max_widths = {}
	lines.each_with_index do |input_line, row_number|
		num_rows += 1
		fields = line_to_fields(input_line)
		fields_list << fields
		max_num_cols = [max_num_cols, fields.length].max
		row_max_widths[row_number] = fields.collect{|field|field.length}.max
	end

	# Print transposed
	for j in (0..(max_num_cols-1)) do
		transposed_fields = []
		for i in (0..(num_rows-1)) do
			cell = fields_list[i][j]
			cell = "" if cell.nil?
			transposed_fields << cell.ljust(row_max_widths[i])
		end
		puts transposed_fields.join(' ').sub(/\s+$/, '')
	end

	return true
end

# ================================================================
# Top-down programming style, please.
main()
