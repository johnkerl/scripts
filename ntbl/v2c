#!/usr/bin/ruby

# ================================================================
# We convert from vertical to CSV format as follows:
# * split on whitespace
# * print transposed
# * left-justify all output columns (which were input rows)
#
# Please see format-notes.txt in this directory for more information.
#
# John Kerl, 2012-03-31
# ================================================================

@@us     = File.basename($0)
@@ourdir = File.dirname($0)

require 'getoptlong'

# ================================================================
def main()
	filenames = ARGV
	ok = true
	if filenames.length == 0
		ok &= do_stdin()
	else
		filenames.each{|filename| ok &= do_file(filename)}
	end
end

# ----------------------------------------------------------------
# Encode comma as hexadecimal ASCII; decode space/tab.
def line_to_fields(input_line)
	input_line.chomp.split(/\s+/).collect{|field|
		if field == '_'
			''
		else
			field.gsub(',', '%2c').gsub(/%20/, ' ').gsub(/%09/, '\t')
		end
	}
end

# ----------------------------------------------------------------
# Non-streaming, since we need to read all lines before transposing.
def do_stdin()
	do_lines($stdin.readlines)
	return true
end

# ----------------------------------------------------------------
# Non-streaming, since we need to read all lines before transposing.
def do_file(filename)
	if ! File.exists?(filename)
		$stderr.puts "Can't find \"#{filename}\"."
		return false
	end
	do_lines(File.readlines(filename))
	return true
end

# ----------------------------------------------------------------
def do_lines(lines)

	# Read, split, and store lines.
	fields_list = []
	max_num_cols = 0
	row_number = 0
	lines.each_with_index do |input_line, line_number|
		fields = line_to_fields(input_line)
		fields_list << fields
		max_num_cols = [max_num_cols, fields.length].max
		row_number += 1
	end
	num_rows = row_number

	# Print transposed

	for j in (0..(max_num_cols-1)) do
		transposed_fields = []
		for i in (0..(num_rows-1)) do
			cell = fields_list[i][j]
			cell = "" if cell.nil?
			cell = cell.gsub(/%20/, ' ').gsub(/%09/, '\t').gsub(/,/, '%2c')
			transposed_fields << cell
		end

		# Data
		puts transposed_fields.join(',')
	end

	return true
end

# ================================================================
# Top-down programming style, please.
main()
