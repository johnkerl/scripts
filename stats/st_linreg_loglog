#!/usr/bin/python -Wall

# ================================================================
# John Kerl
# kerl.john.r@gmail.com
# 2007-07-02
# ================================================================
# A quick fitter for finding the a and k in y = a x^k, e.g.
# for showing that cubic-time algorithms really are (in which
# case t = a n^k and check k ~= 3).
#
# * y = a x^n
# * log y = log a + n log x
# * Regress log y on log n
# * Regression intercept is log a
# * Regression slope is n
#
# This is a crude fit.  Taking logs and then linreg doesn't treat the error
# bars correctly.  A good stats reference should have details.
# ================================================================

from __future__ import division # 1/2 = 0.5, not 0.
from math import  log
import sys
import sackmat_m
import stats_m

argc = len(sys.argv)
if ((argc != 2) and (argc != 3)):
	print >> sys.stderr, "Usage: %s {x file name} {y file name}" % (sys.argv[0])
	print >> sys.stderr, "Or:    %s {x-y-pair file name}." % (sys.argv[0])
	print >> sys.stderr, "Use \"-\" as file name for stdin."
	sys.exit(1)

if (argc == 3):
	file_name_1 = sys.argv[1]
	file_name_2 = sys.argv[2]

	xs = sackmat_m.read_column_vector(float, file_name_1)
	ys = sackmat_m.read_column_vector(float, file_name_2)
elif (argc == 2):
	file_name = sys.argv[1]
	xys = sackmat_m.read_matrix(float, file_name)
	xs = xys.get_column(0)
	ys = xys.get_column(1)

xs = [log(x) for x in xs]
ys = [log(y) for y in ys]

[m, b, stddevm, stddevb] = stats_m.linear_regression(xs, ys)
#print m, stddevm
#print b, stddevb
print 'slope     %11.7f +/- %11.7f' % (m, stddevm)
print 'intercept %11.7f +/- %11.7f' % (b, stddevb)
