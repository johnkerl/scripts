#!/usr/bin/python

# ================================================================
# John Kerl
# kerl.john.r@gmail.com
# 2005-01-25
# Ported from Perl to Python 2012-08-04.
# ================================================================
#
# This program prints binomial coefficients, optionally reduced mod p.
# Examples:
#
# binc ch 7 4
# 35
#
# binc -p 3 ch 7 4
# 2
#
# binc row 7
# 1 7 21 35 35 21 7 1
#
# binc -p 5 row 7
# 1 2 1 0 0 1 2 1
#
# binc -p 7 row 7
# 1 0 0 0 0 0 0 1
#
# binc tri 10 | colprint -r
# 1
# 1  1
# 1  2  1
# 1  3  3   1
# 1  4  6   4   1
# 1  5 10  10   5   1
# 1  6 15  20  15   6   1
# 1  7 21  35  35  21   7   1
# 1  8 28  56  70  56  28   8  1
# 1  9 36  84 126 126  84  36  9  1
# 1 10 45 120 210 252 210 120 45 10 1
#
# binc -p 2 tri 10
# 1
# 1 1
# 1 0 1
# 1 1 1 1
# 1 0 0 0 1
# 1 1 0 0 1 1
# 1 0 1 0 1 0 1
# 1 1 1 1 1 1 1 1
# 1 0 0 0 0 0 0 0 1
# 1 1 0 0 0 0 0 0 1 1
# 1 0 1 0 0 0 0 0 1 0 1
#
# binc -p 7 tri 10
# 1
# 1 1
# 1 2 1
# 1 3 3 1
# 1 4 6 4 1
# 1 5 3 3 5 1
# 1 6 1 6 1 6 1
# 1 0 0 0 0 0 0 1
# 1 1 0 0 0 0 0 1 1
# 1 2 1 0 0 0 0 1 2 1
# 1 3 3 1 0 0 0 1 3 3 1
#
# binc -p 2 -dot tri 30
# o
# oo
# o o
# oooo
# o   o
# oo  oo
# o o o o
# oooooooo
# o       o
# oo      oo
# o o     o o
# oooo    oooo
# o   o   o   o
# oo  oo  oo  oo
# o o o o o o o o
# oooooooooooooooo
# o               o
# oo              oo
# o o             o o
# oooo            oooo
# o   o           o   o
# oo  oo          oo  oo
# o o o o         o o o o
# oooooooo        oooooooo
# o       o       o       o
# oo      oo      oo      oo
# o o     o o     o o     o o
# oooo    oooo    oooo    oooo
# o   o   o   o   o   o   o   o
# oo  oo  oo  oo  oo  oo  oo  oo
# o o o o o o o o o o o o o o o o
#
# ================================================================

import sys, copy

# ----------------------------------------------------------------
def usage():
	print >> sys.stderr, """Usage: %s [options] ch  {n} {k}
Or   : %s [options] row {n}
Or   : %s [options] tri {nmax}
Computes binomial coefficients, optionally reduced mod p.
  ch:  compute a single binomial coefficient.
  row: compute a row of Pascal's triangle: n choose k for k = 0 to n.
  tri: compute nmax rows of Pascal's triangle.
Options:
  -p {p}:    Prime to reduce by.
  -lucas:    Reduce mod p using Lucas Theorem (default).  p must be prime.
  -kerl:     Reduce mod p using Kerl's slow method.  p must be prime.
  -modafter: Reduce mod p after computing n choose k.
  -dot:      Print just a dot for non-zero values, space for zeroes.
  --help:    Print this message.""" \
	% (sys.argv[0],sys.argv[0],sys.argv[0])
	sys.exit(1)

# ----------------------------------------------------------------
def main():
	what       = "undecided"
	how_to_mod = "lucas"
	p          = 0
	do_dots    = False

	argi = 1
	argc = len(sys.argv)

	while (argi < argc) and sys.argv[argi][0] == '-':
		opt = sys.argv[argi]
		argi += 1

		if opt == '--help':
			usage()
		elif opt == '-p':
			if not (argi < argc): usage()
			p = int(sys.argv[argi])
			argi += 1
		elif opt == '--lucas':
			how_to_mod = "lucas"
		elif opt == '-kerl':
			how_to_mod = "kerl"
		elif opt == '-modafter':
			how_to_mod = "modafter"
		elif opt == '-modafter':
			how_to_mod = "modafter"
		elif opt == '-dot':
			do_dots = True
		else:
			usage()
	if not (argi < argc):
		usage()

	what = sys.argv[argi]
	argi += 1

	if what == "ch":
		if (argc - argi) != 2:
			usage()
		n = int(sys.argv[argi])
		k = int(sys.argv[argi+1])
		do_one(n, k, p, how_to_mod, do_dots)
		print

	elif (what == "row"):
		if (argc - argi) != 1:
			usage()
		n = int(sys.argv[argi])
		for k in range(0, n+1):
			do_one(n, k, p, how_to_mod, do_dots)
		print

	elif what == "tri":
		if (argc - argi) != 1:
			usage()
		nmax = int(sys.argv[argi])
		for n in xrange(0, nmax+1):
			for k in xrange(0, n+1):
				do_one(n, k, p, how_to_mod, do_dots)
			print

	else:
		usage()

# ----------------------------------------------------------------
def do_one(n, k, p, how_to_mod, do_dots):
	if (p == 0) or (how_to_mod == "z"):
		b = binc(n, k)
	elif (how_to_mod == "lucas"):
		b = bincp_lucas(n, k, p)
	elif (how_to_mod == "kerl"):
		b = bincp_kerl(n, k, p)
	elif (how_to_mod == "modafter"):
		b = binc(n, k) % p
	else:
		usage()

	if do_dots:
		if b == 0:
			print " ",
		else:
			#print "."
			print "o",
	else:
		print b,

# ----------------------------------------------------------------
def binc(n, k):
	if (k > n):
		return 0
	if (k < 0):
		return 0
	if (k > int(n/2)):
		k = n - k

	rv = 1
	for j in range(0, k):
		rv *= n - j
		rv /= j + 1
	return rv

# ----------------------------------------------------------------
# See http://mathworld.wolfram.com/LucasCorrespondenceTheorem.html.
# Write n and k in base-p notation, with digits n_i and k_i.  Then (n choose k)
# is equivalent mod p to the product of the (n_i choose k_i)'s.

def bincp_lucas(n, k, p):
	if k > int(n/2):
		k = n - k
	rv = 1

	while (n != 0) or (k != 0):
		n_i = n % p; n = int(n / p)
		k_i = k % p; k = int(k / p)
		b = binc(n_i, k_i)
		rv *= b
		rv %= p

	return rv

# ----------------------------------------------------------------
def bincp_kerl(n, k, p):
	if k > n:
		return 0
	if k < 0:
		return 0
	if k > int(n/2):
		k = n - k

	numer = 1
	denom = 1
	pcount = 0

	rv = 1
	for j in range(0, k):
		curnumer = n - j
		while ((curnumer % p) == 0):
			pcount += 1
			curnumer /= p
		numer *= curnumer
		numer %= p

		curdenom = j+1
		while ((curdenom % p) == 0):
			pcount -= 1
			curdenom /= p
		denom *= curdenom
		denom %= p
	if (pcount > 0):
		rv = 0
	elif (pcount == 0):
		rv = numer * modrecip(denom, p)
		rv %= p
	else:
		print >> sys.stderr, "0: coding error; pcount=%r." % (pcount)
		sys.exit(1)
	return rv

# ----------------------------------------------------------------
# xxx should use modpower(a, p-2) w/ repeated squaring.
def modrecip(a, p):
	a %= p
	if (a % p) == 0:
		print >> sys.stderr, "modrecip: division by zero."
		sys.exit(1)
	rv = 1
	e = p-2
	while e > 0:
		rv *= a
		rv %= p
		e -= 1
	return rv

# ================================================================
main()
