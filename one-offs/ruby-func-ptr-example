#!/usr/bin/env ruby

# ==============================================================================
# Ruby function-pointer example/cheat-sheet.  The implementation is a simple
# example of the age-old verb-first-command-processor pattern.
# John Kerl 2012-05-22
# ==============================================================================

@@ourdir = File.dirname($0)
@@us     = File.basename($0)
$: << @@ourdir unless $:.include?(@@ourdir) # Augment load path
$stdout.sync = true

# ==============================================================================
def usage()
	puts "Subcommands:"
	# List subcommands, nicely tabularly.  (Find max subcommand name length
	# and then print them all using that length.)
	max_subcmd_width = @@handler_map.keys.max{|a,b| a.length <=> b.length}.length
	@@handler_map.keys.sort.each do |abbrev|
		func, desc = @@handler_map[abbrev]
		puts "  #{@@us} #{abbrev.ljust(max_subcmd_width)} :  #{desc}"
	end
	exit 1
end

def __main__()
	usage if ARGV.length != 1
	usage if ARGV[0] == '--help'
	usage if ARGV[0] == '-h'
	subcmd = ARGV[0]
	func, desc = @@handler_map[subcmd]
	if func.nil?
		puts "#{@@us}:  Can't find handler for \"#{subcmd}\"."
		usage
	end
	func.call()
	exit 0
end

# ------------------------------------------------------------------------------
def func1()
	puts "This is func1"
end

def func2()
	puts "This is func2"
end

# ------------------------------------------------------------------------------
@@handler_map = {
	"func1" => [method(:func1), "This is the first  function"],
	"func2" => [method(:func2), "This is the second function"],
}

# ==============================================================================
# Top-down programming style, please.
__main__()
raise "__main__ should have exited with a status code but did not."
