#!/usr/bin/env python

# ----------------------------------------------------------------
# John Kerl
# kerl.john.r@gmail.com
# 2007-08-02
# ----------------------------------------------------------------

from __future__ import division # 1/2 = 0.5, not 0.
# Import the cmath module rather than the math module so that exp et al. may
# take complex arguments.
from cmath    import *
from kerlutil import *
import sys

# ----------------------------------------------------------------
def zprint(z):
	print "%11.7f %11.7f" % (z.real, z.imag)

# ----------------------------------------------------------------
# Integral over zpath of f(z)/(z-z0)**m, divided by 2 pi i.

def cgnumint(f, z0, m, zpath):
	sum = 0
	n = len(zpath)

	for i in range(0, n-1):
		z1 = zpath[i]
		z2 = zpath[i+1]
		w1 = f(z1) / (z1-z0)**m
		w2 = f(z2) / (z2-z0)**m
		sum += 0.5 * (w1 + w2) * (z2 - z1)

	# Last step, extrapolated forward.
	z1 = zpath[n-2]
	z2 = zpath[n-1]
	w1 = f(z2) / (z2-z0)**m
	sum += w1 * (z2-z1) # Extrapolate z forward using previous delta z.

	return sum / (2 * pi * 1j)

# ----------------------------------------------------------------
def f(z):
	#return 1.0
	#return 1/z
	#return (z-1)/(z-2)
	return exp(z)

# ----------------------------------------------------------------
R = 0.01
N = 16000
z0 = 0.0
mesh = ztrange(R, 0.0, 2*pi, N, z0)

for m in range(0, 8):
	sum = cgnumint(f, z0, m, mesh)
	print "int f(z)/(z-%g)^%d: " % (z0, m),
	zprint(sum)
