#!/usr/bin/python -Wall

# ----------------------------------------------------------------
# John Kerl
# kerl.john.r@gmail.com
# 2006-03-20
# (Ported to Python 2006-03-06)
#
# This is a radix-2 fast Fourier transform.  Example:
#
# xxx cmts re real-to-complex transform; numerical recipes
# ----------------------------------------------------------------

from __future__ import division # 1/2 = 0.5, not 0.
import sys
import pyfft_m
import pyrcio_m
from math import *

# ----------------------------------------------------------------
def usage():
	print >> sys.stderr, "Usage:", sys.argv[0], "[options] {file name 1} {file name 2}"
	print >> sys.stderr, "Format is in decimal real, one sample per line.  E.g."
	print >> sys.stderr, "  1.0"
	print >> sys.stderr, "  2.0"
	print >> sys.stderr, "  3.0"
	print >> sys.stderr, "  4.0"
	print >> sys.stderr, "Options:"
	print >> sys.stderr, "  -fi:  input folding"
	print >> sys.stderr, "  -nfi: no input folding"
	print >> sys.stderr, "  -fo:  output folding"
	print >> sys.stderr, "  -nfo: no output folding"
	print >> sys.stderr, "  -fwd: forward FFT (exp(-i 2 pi k/N) kernel)"
	print >> sys.stderr, "  -rev: reverse FFT (exp( i 2 pi k/N) kernel)"
	print >> sys.stderr, "  -s:   scaling"
	print >> sys.stderr, "  -ns:  no scaling"
	print >> sys.stderr, "  -dft: Use DFT.  Allows N not to be a power of 2."
	sys.exit(1)

# ================================================================
# Start of program
fold_in     = 0
fold_out    = 0
forward     = 1
scale       = 1
use_dft     = 0
file_name_1 = "-"
file_name_2 = "-"
verbose     = 0;

argc = len(sys.argv)
argi = 1
while (argi < argc):
	arg = sys.argv[argi]
	if (arg[0] != '-'):
		break
	if   (arg == "-fi"):
		fold_in  = 1
	elif (arg == "-nfi"):
		fold_in  = 0
	elif (arg == "-fo"):
		fold_out = 1
	elif (arg == "-nfo"):
		fold_out = 0
	elif (arg == "-fwd"):
		forward  = 1
	elif (arg == "-rev"):
		forward  = 0
	elif (arg == "-s"):
		scale    = 1
	elif (arg == "-ns"):
		scale    = 0
	elif (arg == "-dft"):
		use_dft  = 1
	elif (arg == "-ndft"):
		use_dft  = 0
	elif (arg == "-v"):
		verbose  = 1
	else:
		usage()
	argi += 1

if ((argc - argi) != 2):
	usage()
file_name_1 = sys.argv[argi]
file_name_2 = sys.argv[argi+1]

f = pyrcio_m.read_real_vector(file_name_1)
g = pyrcio_m.read_real_vector(file_name_2)

if verbose:
	print "f:"
	pyrcio_m.print_real_vector(f)
	print

if verbose:
	print "g:"
	pyrcio_m.print_real_vector(g)
	print

N  = len(f)
No2p1 = N/2+1
h = []
for j in range(0, N):
	h.append(complex(f[j], g[j]))

if verbose:
	print "h:"
	pyrcio_m.print_complex_vector(h)
	print

if (use_dft):
	H = pyfft_m.dft(h, fold_in, fold_out, forward, scale)
else:
	H = pyfft_m.fft(h, fold_in, fold_out, forward, scale)

print "H:"
pyrcio_m.print_complex_vector(H)
print

F = []
G = []
for k in range(0, No2p1):
 	A = H[k]
	B = 0
	if (k == 0):
 		B = H[0].conjugate()
	else:
 		B = H[N-k].conjugate()
	F.append((A+B)/2)
	G.append((A-B)/2j)
print

if (use_dft):
	check_F = pyfft_m.dft(f, fold_in, fold_out, forward, scale)
	check_G = pyfft_m.dft(g, fold_in, fold_out, forward, scale)
else:
	check_F = pyfft_m.fft(f, fold_in, fold_out, forward, scale)
	check_G = pyfft_m.fft(g, fold_in, fold_out, forward, scale)

if verbose:
	print "F:"
	pyrcio_m.print_complex_vector(F)
	print

if verbose:
	print "check F:"
	pyrcio_m.print_complex_vector(check_F)
	print

if verbose:
	print "G:"
	pyrcio_m.print_complex_vector(G)
	print

if verbose:
	print "check G:"
	pyrcio_m.print_complex_vector(check_G)
	print

for k in range(0, No2p1):
	print "%11.6f %11.6f %11.6f %11.6f %11.3e %11.3e" % (F[k].real, F[k].imag, G[k].real, G[k].imag, abs(F[k]-check_F[k]), abs(G[k]-check_G[k]))
